import numpy as np
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# 1. Generate binary classification data
X, y = make_classification(n_samples=500, n_features=2, n_redundant=0, 
                           n_informative=2, n_clusters_per_class=1, random_state=42)
# Convert labels from {0,1} to {-1,1}
y = np.where(y == 0, -1, 1)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 2. Hyperparameters
C = 1.0       # Regularization strength
lr = 0.001    # Learning rate
epochs = 1000
n_samples, n_features = X_train.shape

# 3. Initialize weights and bias
w = np.zeros(n_features)
b = 0

# 4. Training using gradient descent
for epoch in range(epochs):
    for i in range(n_samples):
        condition = y_train[i] * (np.dot(X_train[i], w) + b) >= 1
        if condition:
            grad_w = w
            grad_b = 0
        else:
            grad_w = w - C * y_train[i] * X_train[i]
            grad_b = -C * y_train[i]
        
        # Update parameters
        w -= lr * grad_w
        b -= lr * grad_b

# 5. Prediction
def predict(X):
    return np.sign(np.dot(X, w) + b)

y_pred = predict(X_test)

# 6. Evaluation
acc = accuracy_score(y_test, y_pred)
print(f"Test Accuracy: {acc:.4f}")
